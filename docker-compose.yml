version: "3.9"

services:
  # === PostgreSQL ===
  db:
    image: postgres:16-alpine
    container_name: lexi_buddy_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Backend API ===
  api:
    image: ghcr.io/j-lany/lexi-buddy-backend:main
    container_name: lexi_buddy_api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${API_PORT:-4000}
    ports:
      - "${API_PORT:-4000}:4000"

  # === Frontend (Next.js SSR) ===
  frontend:
    image: ghcr.io/j-lany/lexi-buddy-frontend:main
    container_name: lexi_buddy_frontend
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://api:4000
    ports:
      - "${WEB_PORT:-3000}:3000"
    # Healthcheck без wget (через Node.js)
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000',()=>process.exit(0)).on('error',()=>process.exit(1))\""]
      interval: 15s
      timeout: 5s
      retries: 3

  # === Telegram Bot ===
  bot:
    image: ghcr.io/j-lany/lexi-buddy-bot:main
    container_name: lexi_buddy_bot
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: production
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_BASE_URL: http://api:4000
    expose:
      - "8080"

volumes:
  db_data:
